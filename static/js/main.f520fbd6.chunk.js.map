{"version":3,"sources":["components/Notes.js","App.js","reportWebVitals.js","index.js"],"names":["Notes","listNote","removeItem","editItem","className","map","note","id","title","onClick","size","App","useState","setListNote","setNote","isEditing","setIsEditing","editID","setEditID","setBtnClear","onSubmit","e","preventDefault","noteItem","newNote","Date","getTime","toString","console","log","htmlFor","type","value","onChange","target","length","filter","specificItem","find","item","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAwBeA,MAlBf,YAAoD,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,SACnC,OACI,qBAAKC,UAAW,iBAAhB,SACKH,EAASI,KAAI,SAACC,GAAU,IACbC,EAAcD,EAAdC,GAAIC,EAAUF,EAAVE,MACZ,OAAO,sBAAKJ,UAAU,YAAf,UACH,4BAAKI,IACL,sBAAKJ,UAAU,gBAAf,UACI,yBAAQA,UAAU,WAAWK,QAAS,kBAAMN,EAASI,IAArD,cAA2D,cAAC,IAAD,CAAYG,KAAM,cAC7E,yBAAQN,UAAU,aAAaK,QAAS,kBAAMP,EAAWK,IAAzD,cAA+D,cAAC,IAAD,CAASG,KAAO,mBAJhDH,S,QCsExCI,MA5Ef,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNX,EADM,KACIY,EADJ,OAEWD,mBAAS,IAFpB,mBAENN,EAFM,KAEAQ,EAFA,OAGqBF,oBAAS,GAH9B,mBAGNG,EAHM,KAGKC,EAHL,OAIeJ,mBAAS,MAJxB,mBAINK,EAJM,KAIEC,EAJF,OAKmBN,oBAAS,GAL5B,mBAKIO,GALJ,WA+Cb,OACE,qBAAKf,UAAU,OAAf,SACE,sBAAKA,UAAY,YAAjB,UACE,0CACA,mBAAGA,UAAW,cAChB,uBAAMA,UAAU,gBAAgBgB,SA/Bf,SAACC,GAEpB,GADAA,EAAEC,iBACGhB,EAGC,GAAIA,GAAQS,EAChBF,EACEZ,EAASI,KAAI,SAACkB,GACZ,OAAIA,EAAShB,KAAOU,EACX,2BAAKM,GAAZ,IAAsBf,MAAOF,IAExBiB,MAGXT,EAAQ,IACRI,EAAU,MACVF,GAAa,OACR,CACL,IACMQ,EAAU,CAAEjB,IADT,IAAIkB,MAAOC,UAAUC,WACJnB,MAAOF,GACjCO,EAAY,GAAD,mBAAKZ,GAAL,CAAeuB,KAC1BL,GAAY,GACZL,EAAQ,SAnBRc,QAAQC,IAAI,gBA4BZ,UACE,uBAAOC,QAAQ,aAAf,sBACA,uBACE1B,UAAU,YACV2B,KAAK,OACLC,MAAO1B,EACP2B,SAAU,SAACZ,GAAD,OAAMP,EAAQO,EAAEa,OAAOF,UAEnC,wBAAQ5B,UAAU,aAAa2B,KAAK,SAApC,SACGhB,EAAY,OAAS,cAGvBd,EAASkC,OAAS,GACjB,gCACE,cAAC,EAAD,CAAOlC,SAAUA,EAAUC,WA3DlB,SAACK,GAClBM,EAAYZ,EAASmC,QAAO,SAAC9B,GAAD,OAAUA,EAAKC,KAAOA,OA0DSJ,SAxD5C,SAACI,GAChB,IAAM8B,EAAepC,EAASqC,MAAK,SAACC,GAAD,OAAUA,EAAKhC,KAAOA,KACzDS,GAAa,GACbE,EAAUX,GACVO,EAAQuB,EAAa7B,UAqDb,wBAAQJ,UAAU,eAAeK,QAAS,kBAjDlDI,EAAY,SACZM,GAAY,IAgDJ,SAA+D,cAAC,IAAD,CAAYqB,MAAM,mBAAmB9B,KAAK,oBC5DtG+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f520fbd6.chunk.js","sourcesContent":["import React, {useState } from 'react'\r\nimport { FaTrash } from 'react-icons/fa'\r\nimport { AiFillEdit } from 'react-icons/ai'\r\n\r\n\r\n\r\nfunction Notes({ listNote, removeItem, editItem }) {\r\n    return (\r\n        <div className ='container-info'>\r\n            {listNote.map((note) => {\r\n                const { id, title } = note;\r\n                return <div className='note-info' key={id}>\r\n                    <p>{ title}</p>\r\n                    <div className='container-btn'>\r\n                        <button className='btn-edit' onClick={() => editItem(id)}> <AiFillEdit size ='1.5rem'/></button>\r\n                        <button className='btn-remove' onClick={() => removeItem(id)}> <FaTrash size = '1.5rem'/></button>\r\n                    </div>\r\n                </div>\r\n            })}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notes\r\n","import Notes from './components/Notes'\nimport React, { useState } from 'react'\nimport { MdClearAll } from 'react-icons/md'\n\n\nfunction App() {\n  const [listNote, setListNote] = useState([]); \n  const [note, setNote] = useState('');\n  const [isEditing, setIsEditing] = useState(false);\n  const [editID, setEditID] = useState(null);\n  const [btnClear, setBtnClear] = useState(false);\n \n  const removeItem = (id) => {\n    setListNote(listNote.filter((note) => note.id !== id));\n  }\n  const editItem = (id) => {\n    const specificItem = listNote.find((item) => item.id === id);\n    setIsEditing(true);\n    setEditID(id);\n    setNote(specificItem.title);\n  }\n\n  const handleClear = () => {\n    setListNote([]);\n    setBtnClear(false);\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!note) {\n      console.log('notes empty');\n    }\n     else if (note && isEditing) {\n      setListNote(\n        listNote.map((noteItem) => {\n          if (noteItem.id === editID) {\n            return { ...noteItem, title: note };\n          }\n          return noteItem;\n        })\n      );\n      setNote('');\n      setEditID(null);\n      setIsEditing(false);\n    } else {\n      let Id = new Date().getTime().toString();\n      const newNote = { id: Id, title: note };\n      setListNote([...listNote, newNote]);\n      setBtnClear(true);\n      setNote('');\n    }\n  \n  }\n  return (\n    <div className=\"main\">\n      <div className = 'container'>\n        <h2>Todo App</h2>\n        <p className= 'underline'></p>\n      <form className='input-control' onSubmit={handleSubmit}>\n        <label htmlFor='input-info'> Text : </label>\n        <input\n          className='input-box'\n          type='text'\n          value={note}\n          onChange={(e) =>setNote(e.target.value)}\n        ></input>\n        <button className='btn-submit' type='submit'>\n          {isEditing ? 'edit' : 'submit'}\n        </button>\n        </form>\n        {listNote.length > 0 && (\n          <div>\n            <Notes listNote={listNote} removeItem={removeItem} editItem={editItem} ></Notes>\n            <button className='btn-clearAll' onClick={() => handleClear()}><MdClearAll color='rgb(165, 42, 42)' size='2rem'/></button>\n          </div>\n        )}\n        </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}